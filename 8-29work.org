* TODO Java并发编程：线程池的使用
  + Java 中的ThreadPoolExecutor类
	java.uitl.concurrent.ThreadPoolExecutor类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类。下面我们来看一下ThreadPoolExecutor类的具体实现源码。
	在ThreadPoolExecutor类中提供了四个构造方法：
	#+begin_src java
	public class ThreadPollExcutor extends AbstractExcutorService{
		....
		public ThreadPoolExcutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue);
		
		public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory);

		public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,RejectedExecutionHandler handler);

		public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,BlockingQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler);
		....
	}
	
	#+end_src
 　　从上面的代码可以得知，ThreadPoolExecutor继承了AbstractExecutorService类，并提供了四个构造器，事实上，通过观察每个构造器的源码具体实现，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。
    下面解释下一下构造器中各个参数的含义：
	+ corePoolSize：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了prestartAllCoreThreads()或者prestartCoreThread()方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建corePoolSize个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；

	+ maximumPoolSize：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；

	+ keepAliveTime：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize，即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize。但是如果调用了allowCoreThreadTimeOut(boolean)方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0；

	+ unit：参数keepAliveTime的时间单位，有7种取值，在TimeUnit类中有7种静态属性：
	  #+begin_example
	  TimeUnit.DAYS;               //天
	  TimeUnit.HOURS;             //小时
	  TimeUnit.MINUTES;           //分钟
	  TimeUnit.SECONDS;           //秒
	  TimeUnit.MILLISECONDS;      //毫秒
	  TimeUnit.MICROSECONDS;      //微妙
	  TimeUnit.NANOSECONDS;       //纳秒
	  #+end_example

	+ workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：
	  #+begin_example
	  ArrayBlockingQueue;
	  LinkedBlockingQueue;
	  SynchronousQueue;
	  #+end_example
	  ArrayBlockingQueue和PriorityBlockingQueue使用较少，一般使用LinkedBlockingQueue和Synchronous。线程池的排队策略与BlockingQueue有关。
	
    + threadFactory：线程工厂，主要用来创建线程；
	  
	+ handler：表示当拒绝处理任务时的策略，有以下四种取值：
	  #+begin_example
	  ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 
	  ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 
	  ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）
	  ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务 
	  #+end_example
	  
	  runState表示当前线程池的状态，它是一个volatile变量用来保证线程之间的可见性
	  下面几个static final变量表示runState可能的几个取值
	  当创建线程池后，初始时，线程池处于RUNNING状态
	  如果调用了shutdown()方法，线程池处于SHUTDOWN状态，此时线程池不能够接受新的任务，他会等待所有任务执行完毕
	  如果调用了shutdownnow()方法，则线程池处于STOP状态，此时线程池不能接受新任务，并且会尝试终止正在执行的任务。
	  当线程池处于SHUTDOWN或STOP状态，并且所有工作线程已经销毁，任务缓存队列已经清空或执行结束后，线程池被设置为TERMINATED状态。


	  
